// Copyright 2019-2024 The Inspektor Gadget authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package tests

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/inspektor-gadget/inspektor-gadget/integration"

	gadgettesting "github.com/inspektor-gadget/inspektor-gadget/gadgets/testing"
	igtesting "github.com/inspektor-gadget/inspektor-gadget/pkg/testing"
	"github.com/inspektor-gadget/inspektor-gadget/pkg/testing/containers"
	igrunner "github.com/inspektor-gadget/inspektor-gadget/pkg/testing/ig"
	"github.com/inspektor-gadget/inspektor-gadget/pkg/testing/match"
	eventtypes "github.com/inspektor-gadget/inspektor-gadget/pkg/types"
)

type gadgetEvent struct {
	eventtypes.CommonData

	MountNsID uint64 `json:"mountnsid"`
	OldName   string `json:"oldname"`
}

func TestTraceOpen(t *testing.T) {
	gadgettesting.RequireEnvironmentVariables(t)

	runtime := "docker"
	containerFactory, err := containers.NewContainerFactory(runtime)
	require.NoError(t, err, "new container factory")

	containerName := "leaky-app"
	containerImage := "pawarpranav83/leaky-app"

	gadgetCmd := igrunner.New(
		"trace-symlink",
		igrunner.WithFlags(fmt.Sprintf("--runtimes=%s", runtime)),
		igrunner.WithStartAndStop(),
		igrunner.WithValidateOutput(
			func(t *testing.T, output string) {
				expectedEntry := &gadgetEvent{
					CommonData: eventtypes.CommonData{
						Runtime: eventtypes.BasicRuntimeMetadata{
							RuntimeName:        eventtypes.String2RuntimeName(runtime),
							ContainerName:      containerName,
							ContainerImageName: containerImage,
						},
					},
					OldName: "/proc/self/fd/7",
				}

				normalize := func(e *gadgetEvent) {
					e.MountNsID = 0

					e.Runtime.ContainerID = ""
					// The container image digest is not currently enriched for Docker containers:
					// https://github.com/inspektor-gadget/inspektor-gadget/issues/2365
					if e.Runtime.RuntimeName == eventtypes.RuntimeNameDocker {
						e.Runtime.ContainerImageDigest = ""
					}
				}

				match.ExpectEntriesToMatch(t, output, normalize, expectedEntry)
			}),
	)

	igtesting.RunTestSteps([]igtesting.TestStep{gadgetCmd,
		integration.SleepForSecondsCommand(5),
		containerFactory.NewContainer(
			containerName,
			"",
			containers.WithContainerImage(containerImage),
		)}, t)
}
